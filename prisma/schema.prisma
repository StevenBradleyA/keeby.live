// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(cuid())
    title     String
    text      String
    price     Int
    stock     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String

    user     User      @relation(fields: [userId], references: [id])
    comments Comment[]
    reviews  Review[]
}

model Comment {
    id   String @id @default(cuid())
    text String

    userId String
    postId String

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])
}

model Review {
    id         String   @id @default(cuid())
    text       String
    starRating Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    userId String
    postId String

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])
}

model GCHBooking {
    id        String   @id @default(cuid())
    date      DateTime
    status    String
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String

    user           User             @relation(fields: [userId], references: [id])
    GCHTransaction GCHTransaction[]
}

model GCHTransaction {
    id     String @id @default(cuid())
    cost   Int
    type   String
    status String

    userId    String
    bookingId String

    user    User       @relation(fields: [userId], references: [id])
    booking GCHBooking @relation(fields: [bookingId], references: [id])
}

model Images {
    id           String   @id @default(cuid())
    link         String
    resourceType String
    resourceId   String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    userId String

    user User @relation(fields: [userId], references: [id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    notes         String?

    accounts     Account[]
    sessions     Session[]
    posts        Post[]
    comments     Comment[]
    reviews      Review[]
    bookings     GCHBooking[]
    transactions GCHTransaction[]
    GCHImages    Images[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
