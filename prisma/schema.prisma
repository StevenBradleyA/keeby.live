generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "postgresql"
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// next-auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Comment {
    id   String @id @default(cuid())
    text String

    userId         String
    parentId       String?
    referencedUser String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    listingId String?
    postId    String?
    pickId    String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    parent      Comment?      @relation("ParentComment", fields: [parentId], references: [id])
    replies     Comment[]     @relation("ParentComment")
    commentLike CommentLike[]

    listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
    post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    pick    Pick?    @relation(fields: [pickId], references: [id], onDelete: Cascade)

    @@unique([userId, id])
    @@index([listingId], name: "idxCommentListingId")
    @@index([postId], name: "idxCommentPostId")
    @@index([pickId], name: "idxCommentPickId")
}

model CommentLike {
    id        String @id @default(cuid())
    userId    String
    commentId String

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([userId, commentId])
}

model Favorites {
    id     String @id @default(cuid())
    userId String

    listingId String?
    postId    String?
    pickId    String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
    post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    pick    Pick?    @relation(fields: [pickId], references: [id], onDelete: Cascade)

    @@unique([userId, listingId, postId])
    @@index([listingId], name: "idxUserFavoritesListingId")
    @@index([postId], name: "idxUserFavoritesPostId")
    @@index([pickId], name: "idxUserFavoritesPickId")
}

model Game {
    id        String   @id @default(cuid())
    wpm       Float
    pureWpm   Float
    accuracy  Float
    mode      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    keebId String?

    user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    keeb Keeb? @relation(fields: [keebId], references: [id])
}

model Images {
    id           String   @id @default(cuid())
    link         String
    resourceType String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Polymorphic relations
    listingId String?
    postId    String?

    listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
    post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@index([listingId], name: "idxImagesListingId")
    @@index([postId], name: "idxImagesPostId")
}

model Keeb {
    id       String @id @default(cuid())
    name     String
    switches String
    keycaps  String

    userId String

    user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    games Game[]
}

model Listing {
    id           String  @id @default(cuid())
    title        String
    text         String
    soundTest    String?
    switchType   String
    keycaps      String
    switches     String
    price        Int
    soundType    String
    layoutType   String
    assemblyType String
    pcbType      String
    status       String  @default("ACTIVE")
    // ACTIVE, SOLD

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sellerId String
    buyerId  String?

    seller User  @relation("Seller", fields: [sellerId], references: [id], onDelete: Cascade)
    buyer  User? @relation("Buyer", fields: [buyerId], references: [id])

    // reviews            Review[]
    favorites Favorites[]

    comments           Comment[]
    images             Images[]
    listingOffer       ListingOffer[]
    listingTransaction ListingTransaction[]
}

model ListingOffer {
    id        String   @id @default(cuid())
    price     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    listingId String
    buyerId   String

    listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
    buyer   User    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
}

model ListingTransaction {
    id          String @id @default(cuid())
    agreedPrice Int
    status      String @default("ACCEPTED")
    // ACCEPTED REVOKED

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    buyerId   String
    sellerId  String
    listingId String?

    buyer    User      @relation("BuyerRelation", fields: [buyerId], references: [id], onDelete: Cascade)
    seller   User      @relation("SellerRelation", fields: [sellerId], references: [id], onDelete: Cascade)
    listing  Listing?  @relation(fields: [listingId], references: [id])
    messages Message[]
    reviews  Review[]
}

model Message {
    id                   String @id @default(cuid())
    text                 String
    userId               String
    recipientId          String
    listingTransactionId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user               User               @relation("messageOwner", fields: [userId], references: [id], onDelete: Cascade)
    recipient          User               @relation("messageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
    listingTransaction ListingTransaction @relation(fields: [listingTransactionId], references: [id], onDelete: Cascade)

    @@index([userId], name: "idxMessageSenderId")
    @@index([recipientId], name: "idxMessageRecipientId")
    @@index([listingTransactionId], name: "idxMessageTransactionId")
}

model Notification {
    id     String  @id @default(cuid())
    text   String
    type   String
    // MESSAGE 
    typeId String?
    status String
    // READ, UNREAD

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pick {
    id       String  @id @default(cuid())
    title    String
    link     String
    image    String
    category String
    // keyboards, switches, keycaps, deskmats, lube, accessories
    price    Float
    featured Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    description String?

    color String?
    // works for deskmats, caps, switches, keyboards

    // KEYBOARD OPTIONALS
    caseMaterial   String?
    layoutType     String?
    pcbType        String?
    assemblyType   String?
    soundType      String?
    // KEYCAP OPTIONALS
    keycapMaterial String?
    profileType    String?
    // SWITCH OPTIONALS
    switchType     String?
    preLubed       Boolean?

    comments    Comment[]
    favorites   Favorites[]
    pickRatings PickRating[]
}

model PickRating {
    id     String  @id @default(cuid())
    rating Int
    text   String?

    userId    String
    pickId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    pick Pick @relation(fields: [pickId], references: [id], onDelete: Cascade)

    @@unique([userId, pickId])
    @@index([pickId], name: "idxPickRatingPickId")
}

model Post {
    id        String   @id @default(cuid())
    title     String
    text      String?
    tag       String
    link      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String

    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    postLikes PostLike[]
    images    Images[]
    comments  Comment[]
    favorites Favorites[]
}

model PostLike {
    id     String @id @default(cuid())
    userId String
    postId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
}

model Rank {
    id       String @id @default(cuid())
    image    String
    name     String @unique
    standing Float
    minWpm   Float
    maxWpm   Float
    users    User[]
}

model Review {
    id         String   @id @default(cuid())
    text       String
    starRating Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    type       String
    // BUYER SELLER --- refers to recipient

    userId        String
    recipientId   String
    transactionId String

    recipient   User               @relation("ReviewRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
    user        User               @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade)
    transaction ListingTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
    id          String @id @default(cuid())
    name        String @unique
    description String

    users User[] @relation("UserTags")
}

model Ticket {
    id     String @id @default(cuid())
    userId String
    type   String
    // help bug feature praise
    text   String
    email  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    internetPoints Int       @default(0)
    image          String?
    profile        String?
    rankId         String?
    username       String?   @unique
    selectedTag    String?
    paypalEmail    String?

    isAdmin      Boolean @default(false)
    hasProfile   Boolean @default(false)
    isModerator  Boolean @default(false)
    isNewsletter Boolean @default(false)
    isBanned     Boolean @default(false)

    accounts           Account[]
    sessions           Session[]
    favorites          Favorites[]
    posts              Post[]
    comments           Comment[]
    images             Images[]
    games              Game[]
    keebs              Keeb[]
    commentLike        CommentLike[]
    reviews            Review[]             @relation("UserRelation")
    reviewsReceived    Review[]             @relation("ReviewRecipient")
    postLike           PostLike[]
    tags               Tag[]                @relation("UserTags")
    rank               Rank?                @relation(fields: [rankId], references: [id])
    sellerListings     Listing[]            @relation("Seller")
    buyerListings      Listing[]            @relation("Buyer")
    listingOffer       ListingOffer[]
    sentMessages       Message[]            @relation("messageOwner")
    receivedMessages   Message[]            @relation("messageRecipient")
    notifications      Notification[]
    tickets            Ticket[]
    buyerTransactions  ListingTransaction[] @relation("BuyerRelation")
    sellerTransactions ListingTransaction[] @relation("SellerRelation")
    pickRatings        PickRating[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
