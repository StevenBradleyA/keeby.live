generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "postgresql"
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// next-auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Comment {
    id   String @id @default(cuid())
    text String

    userId         String
    parentId       String?
    referencedUser String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    // New explicit relations
    listingId String?
    postId    String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    parent      Comment?      @relation("ParentComment", fields: [parentId], references: [id])
    replies     Comment[]     @relation("ParentComment")
    commentLike CommentLike[]

    // New explicit relations to Listing and Post
    listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
    post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, id])
    @@index([listingId], name: "idxCommentListingId")
    @@index([postId], name: "idxCommentPostId")
}

model CommentLike {
    id        String @id @default(cuid())
    userId    String
    commentId String

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([userId, commentId])
}

model Favorites {
    id        String  @id @default(cuid())
    userId    String
    listingId String?
    postId    String?

    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
    post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, listingId, postId])
    @@index([listingId], name: "idxUserFavoritesListingId")
    @@index([postId], name: "idxUserFavoritesPostId")
}

model Game {
    id        String   @id @default(cuid())
    wpm       Float
    pureWpm   Float
    accuracy  Float
    mode      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    keebId String?

    user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    keeb Keeb? @relation(fields: [keebId], references: [id])
}

model Images {
    id           String   @id @default(cuid())
    link         String
    resourceType String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Polymorphic relations
    listingId String?
    postId    String?

    listing Listing? @relation(fields: [listingId], references: [id])
    post    Post?    @relation(fields: [postId], references: [id])

    @@index([listingId], name: "idxImagesListingId")
    @@index([postId], name: "idxImagesPostId")
}

model Keeb {
    id       String @id @default(cuid())
    name     String
    switches String
    keycaps  String

    userId String

    user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    Game Game[]
}

model Listing {
    id           String  @id @default(cuid())
    title        String
    text         String
    soundTest    String?
    switchType   String
    keycaps      String
    switches     String
    price        Int
    soundType    String
    layoutType   String
    assemblyType String
    pcbType      String

    status String @default("ACTIVE")
    // ACTIVE, SOLD, PENDING

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sellerId String
    buyerId  String?

    seller User  @relation("Seller", fields: [sellerId], references: [id], onDelete: Cascade)
    buyer  User? @relation("Buyer", fields: [buyerId], references: [id])

    reviews            Review[]
    favorites          Favorites[]
    listingTransaction ListingTransaction[]
    listingOffer       ListingOffer[]
    images             Images[]
    comments           Comment[]
}

model ListingOffer {
    id    String @id @default(cuid())
    price Int
    // this will be as cents

    status    String
    // PENDING, ACCEPTED
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    listingId String
    buyerId   String

    listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
    buyer   User    @relation(fields: [buyerId], references: [id])
}

model ListingTransaction {
    id          String @id @default(cuid())
    payed       Int
    agreedPrice Int

    status        String
    // PAYED REFUNDED
    paypalOrderId String
    transactionId String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    buyerId       String
    listingId     String

    buyer   User      @relation(fields: [buyerId], references: [id], onDelete: Cascade)
    listing Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
    Message Message[]
}

model Message {
    id                   String @id @default(cuid())
    text                 String
    userId               String
    recipientId          String
    listingTransactionId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user               User               @relation("messageOwner", fields: [userId], references: [id])
    recipient          User               @relation("messageRecipient", fields: [recipientId], references: [id])
    listingTransaction ListingTransaction @relation(fields: [listingTransactionId], references: [id])

    @@index([userId], name: "idxMessageSenderId")
    @@index([recipientId], name: "idxMessageRecipientId")
    @@index([listingTransactionId], name: "idxMessageTransactionId")
}

model Notification {
    id        String   @id @default(cuid())
    text      String
    type      String
    typeId    String?
    status    String
    // READ, UNREAD
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
    id        String   @id @default(cuid())
    title     String
    text      String?
    tag       String
    link      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String

    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    postLikes PostLike[]
    images    Images[]
    comments  Comment[]
    favorites Favorites[]
}

model PostLike {
    id     String @id @default(cuid())
    userId String
    postId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
}

model Rank {
    id       String @id @default(cuid())
    image    String
    name     String @unique
    standing Float
    minWpm   Float
    maxWpm   Float
    users    User[]
}

model Review {
    id         String   @id @default(cuid())
    text       String
    starRating Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    sellerId  String
    userId    String
    listingId String

    seller  User    @relation("SellerRelation", fields: [sellerId], references: [id], onDelete: Cascade)
    user    User    @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade)
    listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Tag {
    id          String @id @default(cuid())
    name        String @unique
    description String

    users User[] @relation("UserTags")
}

model Ticket {
    id        String   @id @default(cuid())
    userId    String
    text      String
    email     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    internetPoints Int       @default(0)
    image          String?
    profile        String?
    rankId         String?
    username       String?   @unique
    selectedTag    String?
    paypalEmail    String?

    isVerified   Boolean @default(false)
    isAdmin      Boolean @default(false)
    hasProfile   Boolean @default(false)
    isNewsletter Boolean @default(false)

    accounts                Account[]
    sessions                Session[]
    favorites               Favorites[]
    posts                   Post[]
    comments                Comment[]
    images                  Images[]
    games                   Game[]
    keebs                   Keeb[]
    commentLike             CommentLike[]
    review                  Review[]                  @relation("UserRelation")
    reviewsReceived         Review[]                  @relation("SellerRelation")
    postLike                PostLike[]
    tags                    Tag[]                     @relation("UserTags")
    transactions            ListingTransaction[]
    rank                    Rank?                     @relation(fields: [rankId], references: [id])
    sellerListings          Listing[]                 @relation("Seller")
    buyerListings           Listing[]                 @relation("Buyer")
    listingOffer            ListingOffer[]
    sentMessages            Message[]                 @relation("messageOwner")
    receivedMessages        Message[]                 @relation("messageRecipient")
    verificationTransaction VerificationTransaction[]
    notifications           Notification[]
    tickets                 Ticket[]
}

model VerificationTransaction {
    id    String @id @default(cuid())
    price Int

    status        String
    paypalOrderId String
    transactionId String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    userId        String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
