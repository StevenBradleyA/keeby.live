// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model UserFavorites {
    id        String @id @default(cuid())
    userId    String
    listingId String

    user    User    @relation(fields: [userId], references: [id])
    listing Listing @relation(fields: [listingId], references: [id])

    @@unique([userId, listingId])
}

model Post {
    id        String   @id @default(cuid())
    title     String
    text      String?
    tag       String
    link      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String

    user     User       @relation(fields: [userId], references: [id])
    postLike PostLike[]
    images   Images[]
    Comment  Comment[]
}

model Comment {
    id   String @id @default(cuid())
    text String

    userId         String
    parentId       String? // ID of the parent comment, null if top-level comment
    referencedUser String?

    // New explicit relations
    listingId String?
    postId    String?

    user User @relation(fields: [userId], references: [id])

    parent      Comment?      @relation("ParentComment", fields: [parentId], references: [id])
    replies     Comment[]     @relation("ParentComment")
    commentLike CommentLike[]

    // New explicit relations to Listing and Post
    listing Listing? @relation(fields: [listingId], references: [id])
    post    Post?    @relation(fields: [postId], references: [id])

    @@unique([userId, id])
}

model CommentLike {
    id        String @id @default(cuid())
    userId    String
    commentId String

    user    User    @relation(fields: [userId], references: [id])
    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([userId, commentId])
}

model Game {
    id        String   @id @default(cuid())
    wpm       Int
    mode      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    keebId String?

    user User  @relation(fields: [userId], references: [id])
    keeb Keeb? @relation(fields: [keebId], references: [id])
}

model Keeb {
    id       String @id @default(cuid())
    name     String
    switches String
    keycaps  String

    userId String

    user User   @relation(fields: [userId], references: [id])
    Game Game[]
}

model Images {
    id           String   @id @default(cuid())
    link         String
    resourceType String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    userId String
    user   User   @relation(fields: [userId], references: [id])

    // Polymorphic relations
    listingId String?
    postId    String?

    listing Listing? @relation(fields: [listingId], references: [id])
    post    Post?    @relation(fields: [postId], references: [id])
}

model Listing {
    id           String  @id @default(cuid())
    title        String
    text         String
    soundTest    String?
    switchType   String
    keycaps      String
    switches     String
    price        Int
    soundType    String
    layoutType   String
    assemblyType String
    pcbType      String

    sold      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sellerId String
    buyerId  String?

    seller User  @relation("Seller", fields: [sellerId], references: [id])
    buyer  User? @relation("Buyer", fields: [buyerId], references: [id])

    reviews            Review[]
    favorites          UserFavorites[]
    listingTransaction ListingTransaction[]
    listingOffer       ListingOffer[]
    images             Images[]
    Comment            Comment[]
}

model ListingOffer {
    id    String @id @default(cuid())
    price Int
    // this will be as cents

    status    String
    // PENDING, ACCEPTED, REJECTED, WITHDRAWN
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    listingId String
    buyerId   String

    listing Listing @relation(fields: [listingId], references: [id])
    buyer   User    @relation(fields: [buyerId], references: [id])
}

model ListingTransaction {
    id        String   @id @default(cuid())
    price     Int
    // this will be as cents
    name      String
    status    String
    // PENDING CANCELED COMPLETE
    //  stripePaymentId String?  // Unique identifier for the Stripe payment
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    listingId String

    user    User    @relation(fields: [userId], references: [id])
    listing Listing @relation(fields: [listingId], references: [id])
}

model PostLike {
    id     String @id @default(cuid())
    userId String
    postId String

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
}

model Rank {
    id     String @id @default(cuid())
    name   String
    minWpm Int
    maxWpm Int
    users  User[]
}

// could just create ranks in admin to avoid using seeders this way i could change ranks anytime

model Review {
    id         String   @id @default(cuid())
    text       String
    starRating Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    sellerId  String
    userId    String
    listingId String

    seller  User    @relation("SellerRelation", fields: [sellerId], references: [id])
    user    User    @relation("UserRelation", fields: [userId], references: [id])
    listing Listing @relation(fields: [listingId], references: [id])
}

model Tag {
    id          String @id @default(cuid())
    name        String @unique
    description String

    users User[] @relation("UserTags")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    name             String?
    email            String?   @unique
    emailVerified    DateTime?
    image            String?
    profile          String?
    rankId           String?
    username         String?   @unique
    selectedTag      String?
    stripeCustomerId String?   @unique

    isVerified   Boolean @default(false)
    isAdmin      Boolean @default(false)
    hasProfile   Boolean @default(false)
    isNewsletter Boolean @default(false)

    accounts        Account[]
    sessions        Session[]
    favorites       UserFavorites[]
    posts           Post[]
    comments        Comment[]
    images          Images[]
    games           Game[]
    keebs           Keeb[]
    commentLike     CommentLike[]
    review          Review[]             @relation("UserRelation")
    reviewsReceived Review[]             @relation("SellerRelation")
    postLike        PostLike[]
    tags            Tag[]                @relation("UserTags")
    transactions    ListingTransaction[]
    rank            Rank?                @relation(fields: [rankId], references: [id])
    sellerListings  Listing[]            @relation("Seller")
    buyerListings   Listing[]            @relation("Buyer")
    listingOffer    ListingOffer[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
