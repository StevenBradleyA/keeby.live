// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Listing {
    id        String   @id @default(cuid())
    title     String
    text      String
    soundTest String
    price     Int
    active    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // youtube embed link will need a new cat

    userId String
    // buyerId String

    user User @relation(fields: [userId], references: [id])
    // buyer User @relation(fields: [buyerId], references: [id])

    // comments Comment[]
    reviews   Review[]
    favorites UserFavorites[]
}

model UserFavorites {
    id        String @id @default(cuid())
    userId    String
    listingId String

    user    User    @relation(fields: [userId], references: [id])
    listing Listing @relation(fields: [listingId], references: [id])

    @@unique([userId, listingId])
}

model Post {
    id        String   @id @default(cuid())
    title     String
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String

    user     User       @relation(fields: [userId], references: [id])
    postLike PostLike[]
}

model Comment {
    id   String @id @default(cuid())
    text String

    userId         String
    type           String
    typeId         String
    parentId       String? // ID of the parent comment, null if top-level comment
    referencedUser String?

    user User @relation(fields: [userId], references: [id])

    parent      Comment?      @relation("ParentComment", fields: [parentId], references: [id])
    replies     Comment[]     @relation("ParentComment")
    commentLike CommentLike[]
}

model Game {
    id        String   @id @default(cuid())
    wpm       Int
    mode      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    keebId String?

    user User  @relation(fields: [userId], references: [id])
    keeb Keeb? @relation(fields: [keebId], references: [id])
}

model Keeb {
    id       String @id @default(cuid())
    name     String
    switches String
    keycaps  String

    userId String

    user User   @relation(fields: [userId], references: [id])
    Game Game[]
}

model CommentLike {
    id        String @id @default(cuid())
    userId    String
    commentId String

    user    User    @relation(fields: [userId], references: [id])
    comment Comment @relation(fields: [commentId], references: [id])

    @@unique([userId, commentId])
}

model PostLike {
    id     String @id @default(cuid())
    userId String
    postId String

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
}

model Review {
    id         String   @id @default(cuid())
    text       String
    starRating Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    sellerId  String
    userId    String
    listingId String

    seller  User    @relation("SellerRelation", fields: [sellerId], references: [id])
    user    User    @relation("UserRelation", fields: [userId], references: [id])
    listing Listing @relation(fields: [listingId], references: [id])
}

model Transaction {
    id        String   @id @default(cuid())
    cost      Int
    type      String
    status    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    bookingId String

    user User @relation(fields: [userId], references: [id])
}

model Images {
    id           String   @id @default(cuid())
    link         String
    resourceType String
    resourceId   String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    userId String

    user User @relation(fields: [userId], references: [id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    profile       String?
    rank          String?
    tag           String?
    username      String?   @unique

    isVerified   Boolean @default(false)
    isAdmin      Boolean @default(false)
    hasProfile   Boolean @default(false)
    isNewsletter Boolean @default(false)

    accounts        Account[]
    sessions        Session[]
    listings        Listing[]
    favorites       UserFavorites[]
    posts           Post[]
    comments        Comment[]
    transactions    Transaction[]
    images          Images[]
    games           Game[]
    keebs           Keeb[]
    commentLike     CommentLike[]
    review          Review[]        @relation("UserRelation")
    reviewsReceived Review[]        @relation("SellerRelation")
    postLike        PostLike[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
